import mxnet as mx
data = mx.symbol.Variable(name='data')
data = mx.symbol.pad(data=data, mode='reflect', pad_width=(0, 0, 0, 0, 28, 28, 28, 28))
Convolution1 = mx.symbol.Convolution(name='Convolution1', data=data, num_filter=32, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU1 = mx.symbol.LeakyReLU(name='ReLU1', data=Convolution1, act_type='leaky', slope=0.100000)
Convolution2 = mx.symbol.Convolution(name='Convolution2', data=ReLU1, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU2 = mx.symbol.LeakyReLU(name='ReLU2', data=Convolution2, act_type='leaky', slope=0.100000)
Convolution3 = mx.symbol.Convolution(name='Convolution3', data=ReLU2, num_filter=64, pad=(0, 0), kernel=(2,2), stride=(2,2), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU3 = mx.symbol.LeakyReLU(name='ReLU3', data=Convolution3, act_type='leaky', slope=0.100000)
Convolution4 = mx.symbol.Convolution(name='Convolution4', data=ReLU3, num_filter=128, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU4 = mx.symbol.LeakyReLU(name='ReLU4', data=Convolution4, act_type='leaky', slope=0.100000)
Convolution5 = mx.symbol.Convolution(name='Convolution5', data=ReLU4, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU5 = mx.symbol.LeakyReLU(name='ReLU5', data=Convolution5, act_type='leaky', slope=0.100000)
Pooling1 = mx.symbol.Pooling(name='Pooling1', data=ReLU5, pooling_convention='full', global_pool=True, kernel=(1,1), pool_type='avg')
Convolution6 = mx.symbol.Convolution(name='Convolution6', data=Pooling1, num_filter=8, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU6 = mx.symbol.Activation(name='ReLU6', data=Convolution6, act_type='relu')
Convolution7 = mx.symbol.Convolution(name='Convolution7', data=ReLU6, num_filter=64, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
Sigmoid1 = mx.symbol.Activation(name='Sigmoid1', data=Convolution7, act_type='sigmoid')
Scale1 = mx.sym.broadcast_mul(name='Scale1', lhs=ReLU5, rhs=Sigmoid1)
Deconvolution1 = mx.symbol.Deconvolution(name='Deconvolution1', data=Scale1, num_filter=64, pad=(0, 0), kernel=(2,2), stride=(2,2), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU7 = mx.symbol.LeakyReLU(name='ReLU7', data=Deconvolution1, act_type='leaky', slope=0.100000)
Crop1 = mx.symbol.slice(name='Crop1', data=ReLU2, begin=(None, None, 4, 4), end=(None, None, -4, -4))
Eltwise1 = mx.symbol.broadcast_add(name='Eltwise1', lhs=Crop1, rhs=ReLU7)
Convolution8 = mx.symbol.Convolution(name='Convolution8', data=Eltwise1, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU8 = mx.symbol.LeakyReLU(name='ReLU8', data=Convolution8, act_type='leaky', slope=0.100000)
Convolution9 = mx.symbol.Convolution(name='Convolution9', data=ReLU8, num_filter=3, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
Convolution10 = mx.symbol.Convolution(name='Convolution10', data=Convolution9, num_filter=32, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU9 = mx.symbol.LeakyReLU(name='ReLU9', data=Convolution10, act_type='leaky', slope=0.100000)
Convolution11 = mx.symbol.Convolution(name='Convolution11', data=ReLU9, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU10 = mx.symbol.LeakyReLU(name='ReLU10', data=Convolution11, act_type='leaky', slope=0.100000)
Convolution12 = mx.symbol.Convolution(name='Convolution12', data=ReLU10, num_filter=64, pad=(0, 0), kernel=(2,2), stride=(2,2), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU11 = mx.symbol.LeakyReLU(name='ReLU11', data=Convolution12, act_type='leaky', slope=0.100000)
Convolution13 = mx.symbol.Convolution(name='Convolution13', data=ReLU11, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU12 = mx.symbol.LeakyReLU(name='ReLU12', data=Convolution13, act_type='leaky', slope=0.100000)
Convolution14 = mx.symbol.Convolution(name='Convolution14', data=ReLU12, num_filter=128, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU13 = mx.symbol.LeakyReLU(name='ReLU13', data=Convolution14, act_type='leaky', slope=0.100000)
Pooling2 = mx.symbol.Pooling(name='Pooling2', data=ReLU13, pooling_convention='full', global_pool=True, kernel=(1,1), pool_type='avg')
Convolution15 = mx.symbol.Convolution(name='Convolution15', data=Pooling2, num_filter=16, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU14 = mx.symbol.Activation(name='ReLU14', data=Convolution15, act_type='relu')
Convolution16 = mx.symbol.Convolution(name='Convolution16', data=ReLU14, num_filter=128, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
Sigmoid2 = mx.symbol.Activation(name='Sigmoid2', data=Convolution16, act_type='sigmoid')
Scale2 = mx.sym.broadcast_mul(name='Scale2', lhs=ReLU13, rhs=Sigmoid2)
Convolution17 = mx.symbol.Convolution(name='Convolution17', data=Scale2, num_filter=128, pad=(0, 0), kernel=(2,2), stride=(2,2), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU15 = mx.symbol.LeakyReLU(name='ReLU15', data=Convolution17, act_type='leaky', slope=0.100000)
Convolution18 = mx.symbol.Convolution(name='Convolution18', data=ReLU15, num_filter=256, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU16 = mx.symbol.LeakyReLU(name='ReLU16', data=Convolution18, act_type='leaky', slope=0.100000)
Convolution19 = mx.symbol.Convolution(name='Convolution19', data=ReLU16, num_filter=128, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU17 = mx.symbol.LeakyReLU(name='ReLU17', data=Convolution19, act_type='leaky', slope=0.100000)
Pooling3 = mx.symbol.Pooling(name='Pooling3', data=ReLU17, pooling_convention='full', global_pool=True, kernel=(1,1), pool_type='avg')
Convolution20 = mx.symbol.Convolution(name='Convolution20', data=Pooling3, num_filter=16, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU18 = mx.symbol.Activation(name='ReLU18', data=Convolution20, act_type='relu')
Convolution21 = mx.symbol.Convolution(name='Convolution21', data=ReLU18, num_filter=128, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
Sigmoid3 = mx.symbol.Activation(name='Sigmoid3', data=Convolution21, act_type='sigmoid')
Scale3 = mx.sym.broadcast_mul(name='Scale3', lhs=ReLU17, rhs=Sigmoid3)
Deconvolution2 = mx.symbol.Deconvolution(name='Deconvolution2', data=Scale3, num_filter=128, pad=(0, 0), kernel=(2,2), stride=(2,2), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU19 = mx.symbol.LeakyReLU(name='ReLU19', data=Deconvolution2, act_type='leaky', slope=0.100000)
Crop2 = mx.symbol.slice(name='Crop2', data=Scale2, begin=(None, None, 4, 4), end=(None, None, -4, -4))
Eltwise2 = mx.symbol.broadcast_add(name='Eltwise2', lhs=Crop2, rhs=ReLU19)
Convolution22 = mx.symbol.Convolution(name='Convolution22', data=Eltwise2, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU20 = mx.symbol.LeakyReLU(name='ReLU20', data=Convolution22, act_type='leaky', slope=0.100000)
Convolution23 = mx.symbol.Convolution(name='Convolution23', data=ReLU20, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU21 = mx.symbol.LeakyReLU(name='ReLU21', data=Convolution23, act_type='leaky', slope=0.100000)
Pooling4 = mx.symbol.Pooling(name='Pooling4', data=ReLU21, pooling_convention='full', global_pool=True, kernel=(1,1), pool_type='avg')
Convolution24 = mx.symbol.Convolution(name='Convolution24', data=Pooling4, num_filter=8, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU22 = mx.symbol.Activation(name='ReLU22', data=Convolution24, act_type='relu')
Convolution25 = mx.symbol.Convolution(name='Convolution25', data=ReLU22, num_filter=64, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
Sigmoid4 = mx.symbol.Activation(name='Sigmoid4', data=Convolution25, act_type='sigmoid')
Scale4 = mx.sym.broadcast_mul(name='Scale3', lhs=ReLU21, rhs=Sigmoid4)
Deconvolution3 = mx.symbol.Deconvolution(name='Deconvolution3', data=Scale4, num_filter=64, pad=(0, 0), kernel=(2,2), stride=(2,2), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU23 = mx.symbol.LeakyReLU(name='ReLU23', data=Deconvolution3, act_type='leaky', slope=0.100000)
Crop3 = mx.symbol.slice(name='Crop3', data=ReLU10, begin=(None, None, 16, 16), end=(None, None, -16, -16))
Eltwise3 = mx.symbol.broadcast_add(name='Eltwise3', lhs=Crop3, rhs=ReLU23)
Convolution26 = mx.symbol.Convolution(name='Convolution26', data=Eltwise3, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
ReLU24 = mx.symbol.LeakyReLU(name='ReLU24', data=Convolution26, act_type='leaky', slope=0.100000)
Convolution27 = mx.symbol.Convolution(name='Convolution27', data=ReLU24, num_filter=3, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
Crop4 = mx.symbol.slice(name='Crop4', data=Convolution9, begin=(None, None, 20, 20), end=(None, None, -20, -20))
Eltwise4 = mx.symbol.broadcast_add(name='Eltwise4', lhs=Crop4, rhs=Convolution27)
