import mxnet as mx
data = mx.symbol.Variable(name='data')
data = mx.symbol.pad(data=data, mode='reflect', pad_width=(0, 0, 0, 0, 13, 13, 13, 13))
_conv_pre = mx.symbol.Convolution(name='_conv_pre', data=data, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
_conv_pre_relu = mx.symbol.LeakyReLU(name='_conv_pre_relu', data=_conv_pre, act_type='leaky', slope=0.100000)
_res1_conv1 = mx.symbol.Convolution(name='_res1_conv1', data=_conv_pre_relu, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
_res1_conv1_relu = mx.symbol.LeakyReLU(name='_res1_conv1_relu', data=_res1_conv1, act_type='leaky', slope=0.100000)
_res1_conv2 = mx.symbol.Convolution(name='_res1_conv2', data=_res1_conv1_relu, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
_res1_conv2_relu = mx.symbol.LeakyReLU(name='_res1_conv2_relu', data=_res1_conv2, act_type='leaky', slope=0.100000)
_res1_fc1_globalavgpool = mx.symbol.Pooling(name='_res1_fc1_globalavgpool', data=_res1_conv2_relu, pooling_convention='full', global_pool=True, kernel=(1,1), pool_type='avg')
_res1_fc1 = mx.symbol.FullyConnected(name='_res1_fc1', data=_res1_fc1_globalavgpool, num_hidden=16, no_bias=False)
_res1_fc1_relu = mx.symbol.Activation(name='_res1_fc1_relu', data=_res1_fc1, act_type='relu')
_res1_fc2 = mx.symbol.FullyConnected(name='_res1_fc2', data=_res1_fc1_relu, num_hidden=64, no_bias=False)
_res1_fc2_sigmoid = mx.symbol.Activation(name='_res1_fc2_sigmoid', data=_res1_fc2, act_type='sigmoid')
_res1_fc2_sigmoid = mx.symbol.reshape(data=_res1_fc2_sigmoid, shape=(0, 0, 1, 1))
_res1_crop = mx.symbol.slice(name='_res1_crop', data=_conv_pre_relu, begin=(None, None, 2, 2), end=(None, None, -2, -2))
_res1_axpy = mx.symbol.broadcast_add(lhs=mx.symbol.broadcast_mul(lhs=_res1_fc2_sigmoid, rhs=_res1_conv2_relu), rhs=_res1_crop)
_res2_conv1 = mx.symbol.Convolution(name='_res2_conv1', data=_res1_axpy, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
_res2_conv1_relu = mx.symbol.LeakyReLU(name='_res2_conv1_relu', data=_res2_conv1, act_type='leaky', slope=0.100000)
_res2_conv2 = mx.symbol.Convolution(name='_res2_conv2', data=_res2_conv1_relu, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
_res2_conv2_relu = mx.symbol.LeakyReLU(name='_res2_conv2_relu', data=_res2_conv2, act_type='leaky', slope=0.100000)
_res2_fc1_globalavgpool = mx.symbol.Pooling(name='_res2_fc1_globalavgpool', data=_res2_conv2_relu, pooling_convention='full', global_pool=True, kernel=(1,1), pool_type='avg')
_res2_fc1 = mx.symbol.FullyConnected(name='_res2_fc1', data=_res2_fc1_globalavgpool, num_hidden=16, no_bias=False)
_res2_fc1_relu = mx.symbol.Activation(name='_res2_fc1_relu', data=_res2_fc1, act_type='relu')
_res2_fc2 = mx.symbol.FullyConnected(name='_res2_fc2', data=_res2_fc1_relu, num_hidden=64, no_bias=False)
_res2_fc2_sigmoid = mx.symbol.Activation(name='_res2_fc2_sigmoid', data=_res2_fc2, act_type='sigmoid')
_res2_fc2_sigmoid = mx.symbol.reshape(data=_res2_fc2_sigmoid, shape=(0, 0, 1, 1))
_res2_crop = mx.symbol.slice(name='_res2_crop', data=_res1_axpy, begin=(None, None, 2, 2), end=(None, None, -2, -2))
_res2_axpy = mx.symbol.broadcast_add(lhs=mx.symbol.broadcast_mul(lhs=_res2_fc2_sigmoid, rhs=_res2_conv2_relu), rhs=_res2_crop)
_res3_conv1 = mx.symbol.Convolution(name='_res3_conv1', data=_res2_axpy, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
_res3_conv1_relu = mx.symbol.LeakyReLU(name='_res3_conv1_relu', data=_res3_conv1, act_type='leaky', slope=0.100000)
_res3_conv2 = mx.symbol.Convolution(name='_res3_conv2', data=_res3_conv1_relu, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
_res3_conv2_relu = mx.symbol.LeakyReLU(name='_res3_conv2_relu', data=_res3_conv2, act_type='leaky', slope=0.100000)
_res3_fc1_globalavgpool = mx.symbol.Pooling(name='_res3_fc1_globalavgpool', data=_res3_conv2_relu, pooling_convention='full', global_pool=True, kernel=(1,1), pool_type='avg')
_res3_fc1 = mx.symbol.FullyConnected(name='_res3_fc1', data=_res3_fc1_globalavgpool, num_hidden=16, no_bias=False)
_res3_fc1_relu = mx.symbol.Activation(name='_res3_fc1_relu', data=_res3_fc1, act_type='relu')
_res3_fc2 = mx.symbol.FullyConnected(name='_res3_fc2', data=_res3_fc1_relu, num_hidden=64, no_bias=False)
_res3_fc2_sigmoid = mx.symbol.Activation(name='_res3_fc2_sigmoid', data=_res3_fc2, act_type='sigmoid')
_res3_fc2_sigmoid = mx.symbol.reshape(data=_res3_fc2_sigmoid, shape=(0, 0, 1, 1))
_res3_crop = mx.symbol.slice(name='_res3_crop', data=_res2_axpy, begin=(None, None, 2, 2), end=(None, None, -2, -2))
_res3_axpy = mx.symbol.broadcast_add(lhs=mx.symbol.broadcast_mul(lhs=_res3_fc2_sigmoid, rhs=_res3_conv2_relu), rhs=_res3_crop)
_res4_conv1 = mx.symbol.Convolution(name='_res4_conv1', data=_res3_axpy, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
_res4_conv1_relu = mx.symbol.LeakyReLU(name='_res4_conv1_relu', data=_res4_conv1, act_type='leaky', slope=0.100000)
_res4_conv2 = mx.symbol.Convolution(name='_res4_conv2', data=_res4_conv1_relu, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
_res4_conv2_relu = mx.symbol.LeakyReLU(name='_res4_conv2_relu', data=_res4_conv2, act_type='leaky', slope=0.100000)
_res4_fc1_globalavgpool = mx.symbol.Pooling(name='_res4_fc1_globalavgpool', data=_res4_conv2_relu, pooling_convention='full', global_pool=True, kernel=(1,1), pool_type='avg')
_res4_fc1 = mx.symbol.FullyConnected(name='_res4_fc1', data=_res4_fc1_globalavgpool, num_hidden=16, no_bias=False)
_res4_fc1_relu = mx.symbol.Activation(name='_res4_fc1_relu', data=_res4_fc1, act_type='relu')
_res4_fc2 = mx.symbol.FullyConnected(name='_res4_fc2', data=_res4_fc1_relu, num_hidden=64, no_bias=False)
_res4_fc2_sigmoid = mx.symbol.Activation(name='_res4_fc2_sigmoid', data=_res4_fc2, act_type='sigmoid')
_res4_fc2_sigmoid = mx.symbol.reshape(data=_res4_fc2_sigmoid, shape=(0, 0, 1, 1))
_res4_crop = mx.symbol.slice(name='_res4_crop', data=_res3_axpy, begin=(None, None, 2, 2), end=(None, None, -2, -2))
_res4_axpy = mx.symbol.broadcast_add(lhs=mx.symbol.broadcast_mul(lhs=_res4_fc2_sigmoid, rhs=_res4_conv2_relu), rhs=_res4_crop)
_res5_conv1 = mx.symbol.Convolution(name='_res5_conv1', data=_res4_axpy, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
_res5_conv1_relu = mx.symbol.LeakyReLU(name='_res5_conv1_relu', data=_res5_conv1, act_type='leaky', slope=0.100000)
_res5_conv2 = mx.symbol.Convolution(name='_res5_conv2', data=_res5_conv1_relu, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
_res5_conv2_relu = mx.symbol.LeakyReLU(name='_res5_conv2_relu', data=_res5_conv2, act_type='leaky', slope=0.100000)
_res5_fc1_globalavgpool = mx.symbol.Pooling(name='_res5_fc1_globalavgpool', data=_res5_conv2_relu, pooling_convention='full', global_pool=True, kernel=(1,1), pool_type='avg')
_res5_fc1 = mx.symbol.FullyConnected(name='_res5_fc1', data=_res5_fc1_globalavgpool, num_hidden=16, no_bias=False)
_res5_fc1_relu = mx.symbol.Activation(name='_res5_fc1_relu', data=_res5_fc1, act_type='relu')
_res5_fc2 = mx.symbol.FullyConnected(name='_res5_fc2', data=_res5_fc1_relu, num_hidden=64, no_bias=False)
_res5_fc2_sigmoid = mx.symbol.Activation(name='_res5_fc2_sigmoid', data=_res5_fc2, act_type='sigmoid')
_res5_fc2_sigmoid = mx.symbol.reshape(data=_res5_fc2_sigmoid, shape=(0, 0, 1, 1))
_res5_crop = mx.symbol.slice(name='_res5_crop', data=_res4_axpy, begin=(None, None, 2, 2), end=(None, None, -2, -2))
_res5_axpy = mx.symbol.broadcast_add(lhs=mx.symbol.broadcast_mul(lhs=_res5_fc2_sigmoid, rhs=_res5_conv2_relu), rhs=_res5_crop)
_conv_bridge = mx.symbol.Convolution(name='_conv_bridge', data=_res5_axpy, num_filter=64, pad=(0, 0), kernel=(3,3), stride=(1,1), no_bias=False, dilate=(1, 1), num_group=1, layout='NCHW')
_conv_bridge_relu = mx.symbol.LeakyReLU(name='_conv_bridge_relu', data=_conv_bridge, act_type='leaky', slope=0.100000)
_crop = mx.symbol.slice(name='_crop', data=_conv_pre_relu, begin=(None, None, 11, 11), end=(None, None, -11, -11))
_add = mx.symbol.broadcast_add(name='_add', lhs=_conv_bridge_relu, rhs=_crop)
_conv_post = mx.symbol.Deconvolution(name='_conv_post', data=_add, num_filter=3, pad=(3, 3), kernel=(4,4), stride=(2,2), no_bias=True, dilate=(1, 1), num_group=1, layout='NCHW')
